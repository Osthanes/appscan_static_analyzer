{
    "id": "ibm.devops.services.pipeline.appscan.static.builder",
    "version": 1,
    "name_key": "ExtName",
    "desc_key": "ExtDesc",
    "extension_type": "Build",
    "message_key": "ExtMessage",
    "inputs": [
        {
            "type": "Bluemix",
            "inclusion" : "always"
        }
    ],
    "params": [
        {
            "name": "SETUP_SERVICE_SPACE",
            "type": "Text",
            "required": "true",
            "default_value": "false",
            "label_key": "ACCEPT_KEY",
            "desc_key": "ACCEPT_DESC"
        },
        {
            "name": "SUBMISSION_NAME",
            "type": "Text",
            "required": "true",
            "default_value": "securityscan",
            "label_key": "SUBMISSION_NAME_KEY",
            "desc_key": "SUBMISSION_NAME_DESC"
        },
        {
            "name": "REQUIRE_SUCCESS",
            "type": "Text",
            "required": "true",
            "default_value": "true",
            "label_key": "REQUIRE_SUCCESS_KEY",
            "desc_key": "REQUIRE_SUCCESS_DESC"
        },
        {
            "name": "WAIT_TIME",
            "type": "Text",
            "required": "false",
            "default_value": "5",
            "label_key": "WAIT_TIME_KEY",
            "desc_key": "WAIT_TIME_DESC"
        }
    ],
    "outputs": [
        {
            "type": "Artifacts",
            "inclusion" : "always"
        }
    ],
    "execution": {
        "type": "JenkinsDocker",
        "shell": "#!/bin/bash
set +x
set +e
export INIT_START_TIME=$(date +\"%s\")
export SUBMISSION_NAME=#SUBMISSION_NAME#
export SETUP_SERVICE_SPACE=#SETUP_SERVICE_SPACE#
export REQUIRE_SUCCESS=#REQUIRE_SUCCESS#
export WAIT_TIME=#WAIT_TIME#
# OSSC line
dpkg -l | grep '^ii' > $EXT_DIR/pkglist
. $EXT_DIR/_init.sh
# OSSC line
dpkg -l | grep '^ii' > $EXT_DIR/pkglist2
if [[ $DEBUG -eq 1 ]]; then
    diff $EXT_DIR/pkglist $EXT_DIR/pkglist2
fi
INIT_END_TIME=$(date +\"%s\")
export INIT_EST_TIME=$(($INIT_END_TIME-$INIT_START_TIME))
echo -e \"Init runtime of `date -u -d @\"$INIT_EST_TIME\" +\'%-Mm %-Ss\'`\"
echo -e \"${label_color}Starting build script${no_color}\"

# helper function to print the end time for this script
end_script_time() {
    SCRIPT_END_TIME=$(date +\"%s\")
    SCRIPT_EST_TIME=$(($SCRIPT_END_TIME-$INIT_END_TIME))
    echo -e \"Script runtime of `date -u -d @\"$SCRIPT_EST_TIME\" +\'%-Mm %-Ss\'`\"
}

# helper setup to allow check for always succeed
export TRUESTR=\"true\"
if [ \"${REQUIRE_SUCCESS}x\" == \"x\" ]; then
    REQUIRE_SUCCESS=\"false\"
fi

# run the python appscan checker, dump results on output
if [ -f ${EXT_DIR}/appscan_check.py ]; then 
    ${EXT_DIR}/appscan_check.py
    RESULT=$?

    if [ $RESULT -ne 0 ]; then
        echo -e \"${red}Error running appscan ${no_color}\"
        end_script_time
        if [ \"${REQUIRE_SUCCESS,,}\" = \"${TRUESTR,,}\" ]; then
            exit 1
        else
            # if dont block pipeline, always succeed
            exit 0
        fi
    else
        echo -e \"${green}Application scan was successful ${no_color}\"
    fi  
else 
    echo -e \"${red}Appscan helper script not available, failed.${no_color}\"
    end_script_time
    if [ \"${REQUIRE_SUCCESS,,}\" = \"${TRUESTR,,}\" ]; then
        exit 1
    else
        # if dont block pipeline, always succeed
        exit 0
    fi
fi  
"
    }
    },
    "project": "https://hub.jazz.net/project/alchemy/Alchemy-Ostanes",
    "project_example": "https://hub.jazz.net/pipeline/rjminsha/ice-pipeline_demo",
    "project_contact": "rjminsha@us.ibm.com"
}
