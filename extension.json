{
    "id": "ibm.devops.services.pipeline.appscan.static.builder",
    "version": 1,
    "name_key": "ExtName",
    "desc_key": "ExtDesc",
    "extension_type": "Test",
    "message_key": "ExtMessage",
    "inputs": [
        {
            "type": "Bluemix",
            "inclusion" : "always"
        }
    ],
    "params": [
        {
            "name": "SETUP_SERVICE_SPACE",
            "type": "Checkbox",
            "required": "true",
            "default_value": "false",
            "label_key": "ACCEPT_KEY",
            "desc_key": "ACCEPT_DESC"
        },
        {
            "name": "WAIT_TIME",
            "type": "Text",
            "required": "false",
            "default_value": "5",
            "label_key": "WAIT_TIME_KEY",
            "desc_key": "WAIT_TIME_DESC"
        }
    ],
    "outputs": [
        {
            "type": "Artifacts",
            "inclusion" : "always"
        }
    ],
    "execution": {
        "type": "JenkinsDocker",
        "shell": "#!/bin/bash
set +x
set +e
export INIT_START_TIME=$(date +\"%s\")
export SETUP_SERVICE_SPACE=#SETUP_SERVICE_SPACE#
export WAIT_TIME=#WAIT_TIME#
# OSSC line
dpkg -l | grep '^ii' > $EXT_DIR/pkglist
. $EXT_DIR/_init.sh
# OSSC line
dpkg -l | grep '^ii' > $EXT_DIR/pkglist2
if [[ $DEBUG -eq 1 ]]; then
    diff $EXT_DIR/pkglist $EXT_DIR/pkglist2
fi
INIT_END_TIME=$(date +\"%s\")
export INIT_EST_TIME=$(($INIT_END_TIME-$INIT_START_TIME))
echo -e \"Init runtime of `date -u -d @\"$INIT_EST_TIME\" +\'%-Mm %-Ss\'`\"
echo -e \"${label_color}Starting build script${no_color}\"

# helper function to print the end time for this script
end_script_time() {
    SCRIPT_END_TIME=$(date +\"%s\")
    SCRIPT_EST_TIME=$(($SCRIPT_END_TIME-$INIT_END_TIME))
    echo -e \"Script runtime of `date -u -d @\"$SCRIPT_EST_TIME\" +\'%-Mm %-Ss\'`\"
}

# run the python IBM Security Static Analyzer checker, dump results on output
if [ -f ${EXT_DIR}/appscan_check.py ]; then 
    ${EXT_DIR}/appscan_check.py
    RESULT=$?

    # add the appscan result json file to DRA
    if [ $DRA_ENABLED -eq 0 ]; then
        RESULT_FILE=\"appscan-result.json\"
        if [ -e \"$RESULT_FILE\" ]; then
            add_result_rule_to_dra \"${RESULT_FILE}\"
            RC=$?
            if [ $RC -eq 0 ]; then
                echo -e \"${green}Request DRA decision for ${CRITERIAL_NAME}.${no_color}\"
                dra_grunt_decision \"${CRITERIAL_NAME}\"
                RC=$?
                if [ $RC -eq 0 ]; then
                    echo -e \"${green}DRA Decision result is '${DRA_DECISION}' ${no_color}\"
                elif [ $RC -eq 1 ]; then
                    echo -e \"${label_color}DRA Decision result is '${DRA_DECISION}' ${no_color}\"
                elif [ $RC -eq 2 ]; then
                    echo -e \"${red}DRA Decision result is '${DRA_DECISION}' ${no_color}\"
                else
                    echo -e \"${label_color}Failed to execute decision for criterial ${CRITERIAL_NAME} with return error code ${RC}.${no_color}\"
                fi
            else
                echo -e \"${label_color}Failed to add result rule file ${RESULT_FILE} to DRA with return error code ${RC}.${no_color}\"
            fi
        else
            echo -e \"${label_color}Failed to get result rule file ${RESULT_FILE}.${no_color}\"
        fi
    fi

    if [ \"${ARCHIVE_DIR}\" == \"${WORKSPACE}\" ]; then 
        echo \"Achive directory, is the working directory\"
    else 
        echo \"Archive directory, is ${ARCHIVE_DIR}.  Copy all content to that directory\"
        pushd ${WORKSPACE} &> /dev/null
        # also copy .git metadata
        if [ -d .git ]; then
            tar -cf source.tar * .git
        else
            tar -cf source.tar *
        fi
        mv source.tar ${ARCHIVE_DIR}
        cd ${ARCHIVE_DIR}
        tar -xf source.tar 
        rm source.tar 
        popd &> /dev/null
    fi 

    if [ $RESULT -ne 0 ]; then
        echo -e \"${red}Error running IBM Security Static Analyzer ${no_color}\"
        if [ $DRA_ENABLED -eq 0 ]; then
            ${EXT_DIR}/utilities/sendMessage.sh -l bad -m \"Error running IBM Security Static Analyzer. Check the <${DRA_REPORT_URL}|Deployment Risk Analytics> decision report\"
        fi
        end_script_time
        exit 1
    else
        echo -e \"${green}Application scan was successful ${no_color}\"
        if [ $DRA_ENABLED -eq 0 ]; then
            ${EXT_DIR}/utilities/sendMessage.sh -l good -m \"Application scan was successful. Check the <${DRA_REPORT_URL}|Deployment Risk Analytics> decision report\"
        fi
    fi  
else 
    echo -e \"${red}IBM Security Static Analyzer helper script not available, failed.${no_color}\"
    end_script_time
    exit 1
fi  
"
    }
    },
    "project": "https://hub.jazz.net/project/alchemy/Alchemy-Ostanes",
    "project_example": "https://hub.jazz.net/pipeline/rjminsha/ice-pipeline_demo",
    "project_contact": "rjminsha@us.ibm.com"
}
